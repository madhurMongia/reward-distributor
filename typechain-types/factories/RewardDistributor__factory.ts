/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  RewardDistributor,
  RewardDistributorInterface,
} from "../RewardDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountPerClaim",
        type: "uint256",
      },
      {
        internalType: "contract ICrossChainProofOfHumanity",
        name: "_crossChainProofOfHumanity",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes20",
        name: "humanityID",
        type: "bytes20",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "amountPerClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes20",
        name: "",
        type: "bytes20",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "crossChainProofOfHumanity",
    outputs: [
      {
        internalType: "contract ICrossChainProofOfHumanity",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516113a83803806113a883398181016040528101906100329190610246565b61004c6791e314b3ea9b1a8860c01b61016c60201b60201c565b61006667df8b3a9527c13f8160c01b61016c60201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506100b467daf8973d0e9f359c60c01b61016c60201b60201c565b8160a081815250506100d667b480c6230f4cf6c360c01b61016c60201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013067fd90202106de821360c01b61016c60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050610299565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019f82610174565b9050919050565b6101af81610194565b81146101ba57600080fd5b50565b6000815190506101cc816101a6565b92915050565b6000819050919050565b6101e5816101d2565b81146101f057600080fd5b50565b600081519050610202816101dc565b92915050565b600061021382610194565b9050919050565b61022381610208565b811461022e57600080fd5b50565b6000815190506102408161021a565b92915050565b60008060006060848603121561025f5761025e61016f565b5b600061026d868287016101bd565b935050602061027e868287016101f3565b925050604061028f86828701610231565b9150509250925092565b60805160a05160c0516110b66102f26000396000818161019d015281816104f3015261060a01526000818161017901528181610837015261091201526000818161032b015281816107fa0152610b8a01526110b66000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634e71d92d1161005b5780634e71d92d146101155780638da5cb5b1461011f578063f2fde38b1461013d578063fc0c546a1461015957610088565b8063013d88471461008d57806302c69ac8146100ab5780632e1a7d4d146100c9578063475898f5146100e5575b600080fd5b610095610177565b6040516100a29190610bc8565b60405180910390f35b6100b361019b565b6040516100c09190610c62565b60405180910390f35b6100e360048036038101906100de9190610cae565b6101bf565b005b6100ff60048036038101906100fa9190610d33565b610481565b60405161010c9190610d7b565b60405180910390f35b61011d6104a1565b005b610127610949565b6040516101349190610db7565b60405180910390f35b61015760048036038101906101529190610dfe565b61096d565b005b610161610b88565b60405161016e9190610e4c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101d367b15a86d95a132fb560c01b610bac565b6101e76702949186594d2daf60c01b610bac565b6101fb670e0860599cdd30eb60c01b610bac565b61020f673376cdfec5b1992360c01b610bac565b610223678dbb274f550bd93a60c01b610bac565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a890610ec4565b60405180910390fd5b6102c567fa55abdd596ef4c060c01b610bac565b6102d967d37b5c4722cd47d560c01b610bac565b6102ed677421b9ce4990715f60c01b610bac565b610301672e005780bb5202a460c01b610bac565b61031567f869a125ee2b351e60c01b610bac565b61032967b39090c033605b3660c01b610bac565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103a4929190610ee4565b6020604051808303816000875af11580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610f39565b506103fc67f141ca9e4b2079b760c01b610bac565b6104106755b8aa3d8a0236ea60c01b610bac565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516104769190610bc8565b60405180910390a250565b60016020528060005260406000206000915054906101000a900460ff1681565b6104b567bae338796a4f6f4660c01b610bac565b6104c9672bd40ee61d739b1060c01b610bac565b6104dd67b77320eef91f2a6460c01b610bac565b6104f167cc1648a7e5024fc360c01b610bac565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f72c436f336040518263ffffffff1660e01b815260040161054a9190610db7565b602060405180830381865afa158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190610f39565b6105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190610fb2565b60405180910390fd5b6105de670d5707728d87abe860c01b610bac565b6105f2676e0becedc53deab760c01b610bac565b610606679166ade5d792c8b360c01b610bac565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e274f78f336040518263ffffffff1660e01b81526004016106619190610db7565b602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190610fe7565b90506106b867293fd9584d8f129c60c01b610bac565b6106cc6773d366afe99dbd6f60c01b610bac565b6106e067500a61aae0ced2f160c01b610bac565b60016000826bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff161561075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690611060565b60405180910390fd5b61077367e2d56225ff78cd8460c01b610bac565b610787674ba2c1e3688efdea60c01b610bac565b6001806000836bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506107e467a6c23a17300ef05360c01b610bac565b6107f86701c0aaaa20483b4860c01b610bac565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb337f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610873929190610ee4565b6020604051808303816000875af1158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190610f39565b506108cb672ce9ee1a28373a1060c01b610bac565b6108df67f8d24e51bd37fca060c01b610bac565b806bffffffffffffffffffffffff19167ff9f8da45022b175812f61e1203d83ce02d97a24b0145b7fdac6b617ac3887c427f000000000000000000000000000000000000000000000000000000000000000060405161093e9190610bc8565b60405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61098167c850c283cd2bd4f560c01b610bac565b6109956702949186594d2daf60c01b610bac565b6109a9670e0860599cdd30eb60c01b610bac565b6109bd673376cdfec5b1992360c01b610bac565b6109d1678dbb274f550bd93a60c01b610bac565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690610ec4565b60405180910390fd5b610a7367fa55abdd596ef4c060c01b610bac565b610a8767d37b5c4722cd47d560c01b610bac565b610a9b67fef1e6f4f3f760dc60c01b610bac565b610aaf67d069ae127022964360c01b610bac565b610ac367a69591ec1c456c7960c01b610bac565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b1767811fdaca6705cc2660c01b610bac565b610b2b67a8843818ebddf6bf60c01b610bac565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b7f000000000000000000000000000000000000000000000000000000000000000081565b50565b6000819050919050565b610bc281610baf565b82525050565b6000602082019050610bdd6000830184610bb9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c28610c23610c1e84610be3565b610c03565b610be3565b9050919050565b6000610c3a82610c0d565b9050919050565b6000610c4c82610c2f565b9050919050565b610c5c81610c41565b82525050565b6000602082019050610c776000830184610c53565b92915050565b600080fd5b610c8b81610baf565b8114610c9657600080fd5b50565b600081359050610ca881610c82565b92915050565b600060208284031215610cc457610cc3610c7d565b5b6000610cd284828501610c99565b91505092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b610d1081610cdb565b8114610d1b57600080fd5b50565b600081359050610d2d81610d07565b92915050565b600060208284031215610d4957610d48610c7d565b5b6000610d5784828501610d1e565b91505092915050565b60008115159050919050565b610d7581610d60565b82525050565b6000602082019050610d906000830184610d6c565b92915050565b6000610da182610be3565b9050919050565b610db181610d96565b82525050565b6000602082019050610dcc6000830184610da8565b92915050565b610ddb81610d96565b8114610de657600080fd5b50565b600081359050610df881610dd2565b92915050565b600060208284031215610e1457610e13610c7d565b5b6000610e2284828501610de9565b91505092915050565b6000610e3682610c2f565b9050919050565b610e4681610e2b565b82525050565b6000602082019050610e616000830184610e3d565b92915050565b600082825260208201905092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000610eae600983610e67565b9150610eb982610e78565b602082019050919050565b60006020820190508181036000830152610edd81610ea1565b9050919050565b6000604082019050610ef96000830185610da8565b610f066020830184610bb9565b9392505050565b610f1681610d60565b8114610f2157600080fd5b50565b600081519050610f3381610f0d565b92915050565b600060208284031215610f4f57610f4e610c7d565b5b6000610f5d84828501610f24565b91505092915050565b7f6e6f742068756d616e0000000000000000000000000000000000000000000000600082015250565b6000610f9c600983610e67565b9150610fa782610f66565b602082019050919050565b60006020820190508181036000830152610fcb81610f8f565b9050919050565b600081519050610fe181610d07565b92915050565b600060208284031215610ffd57610ffc610c7d565b5b600061100b84828501610fd2565b91505092915050565b7f616c726561647920636c61696d65640000000000000000000000000000000000600082015250565b600061104a600f83610e67565b915061105582611014565b602082019050919050565b600060208201905081810360008301526110798161103d565b905091905056fea264697066735822122097c45ed222670ea76748f637aa74c6ac0bdab67baa67476986efcd21e3f023f764736f6c63430008190033";

type RewardDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardDistributor__factory extends ContractFactory {
  constructor(...args: RewardDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    _amountPerClaim: BigNumberish,
    _crossChainProofOfHumanity: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _token,
      _amountPerClaim,
      _crossChainProofOfHumanity,
      overrides || {}
    );
  }
  override deploy(
    _token: AddressLike,
    _amountPerClaim: BigNumberish,
    _crossChainProofOfHumanity: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _token,
      _amountPerClaim,
      _crossChainProofOfHumanity,
      overrides || {}
    ) as Promise<
      RewardDistributor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RewardDistributor__factory {
    return super.connect(runner) as RewardDistributor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardDistributorInterface {
    return new Interface(_abi) as RewardDistributorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RewardDistributor {
    return new Contract(address, _abi, runner) as unknown as RewardDistributor;
  }
}
