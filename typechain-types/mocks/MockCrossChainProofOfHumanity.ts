/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MockCrossChainProofOfHumanityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "humanityOf"
      | "isHuman"
      | "setHumanityOf"
      | "setIsHuman"
      | "setupHuman"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "humanityOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHuman",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHumanityOf",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsHuman",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setupHuman",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "humanityOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHuman", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHumanityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsHuman", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setupHuman", data: BytesLike): Result;
}

export interface MockCrossChainProofOfHumanity extends BaseContract {
  connect(runner?: ContractRunner | null): MockCrossChainProofOfHumanity;
  waitForDeployment(): Promise<this>;

  interface: MockCrossChainProofOfHumanityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  humanityOf: TypedContractMethod<[_human: AddressLike], [string], "view">;

  isHuman: TypedContractMethod<[_human: AddressLike], [boolean], "view">;

  setHumanityOf: TypedContractMethod<
    [_human: AddressLike, humanityID: BytesLike],
    [void],
    "nonpayable"
  >;

  setIsHuman: TypedContractMethod<
    [_human: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setupHuman: TypedContractMethod<
    [humanityID: BytesLike, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "humanityOf"
  ): TypedContractMethod<[_human: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isHuman"
  ): TypedContractMethod<[_human: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setHumanityOf"
  ): TypedContractMethod<
    [_human: AddressLike, humanityID: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsHuman"
  ): TypedContractMethod<
    [_human: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupHuman"
  ): TypedContractMethod<
    [humanityID: BytesLike, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
